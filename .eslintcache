[{"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx":"1","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts":"2","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts":"3","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx":"4","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx":"5","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx":"6","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx":"7","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx":"8","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx":"9","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx":"10","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx":"11","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx":"12","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx":"13","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts":"14","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx":"15","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx":"16","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx":"17","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx":"18","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx":"19","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx":"20","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx":"21","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx":"22","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx":"23","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx":"24","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx":"25","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx":"26","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx":"27","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx":"28","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx":"29","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx":"30","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx":"31","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx":"32","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\DiscoverService.tsx":"33","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Logout.tsx":"34","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\CreateService.tsx":"35"},{"size":937,"mtime":1612589183659,"results":"36","hashOfConfig":"37"},{"size":416,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":5258,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":565,"mtime":1615369872161,"results":"40","hashOfConfig":"37"},{"size":1785,"mtime":1615986881733,"results":"41","hashOfConfig":"37"},{"size":911,"mtime":1615372167890,"results":"42","hashOfConfig":"37"},{"size":1353,"mtime":1616003859697,"results":"43","hashOfConfig":"37"},{"size":1361,"mtime":1616003856201,"results":"44","hashOfConfig":"37"},{"size":2343,"mtime":1615987490671,"results":"45","hashOfConfig":"37"},{"size":9029,"mtime":1616133979390,"results":"46","hashOfConfig":"37"},{"size":1154,"mtime":1615981615496,"results":"47","hashOfConfig":"37"},{"size":1572,"mtime":1615369805449,"results":"48","hashOfConfig":"37"},{"size":15876,"mtime":1616003707337,"results":"49","hashOfConfig":"37"},{"size":122,"mtime":1612589639281,"results":"50","hashOfConfig":"37"},{"size":2115,"mtime":1615987672087,"results":"51","hashOfConfig":"37"},{"size":5369,"mtime":1615986775097,"results":"52","hashOfConfig":"37"},{"size":1177,"mtime":1612583175483,"results":"53","hashOfConfig":"37"},{"size":2535,"mtime":1615980890737,"results":"54","hashOfConfig":"37"},{"size":5271,"mtime":1616133921382,"results":"55","hashOfConfig":"37"},{"size":14395,"mtime":1616134019722,"results":"56","hashOfConfig":"37"},{"size":3731,"mtime":1616134025724,"results":"57","hashOfConfig":"37"},{"size":327,"mtime":1612622898457,"results":"58","hashOfConfig":"37"},{"size":13051,"mtime":1616134003564,"results":"59","hashOfConfig":"37"},{"size":3744,"mtime":1616134015413,"results":"60","hashOfConfig":"37"},{"size":527,"mtime":1614852786625,"results":"61","hashOfConfig":"37"},{"size":2255,"mtime":1615956317723,"results":"62","hashOfConfig":"37"},{"size":874,"mtime":1612420231202,"results":"63","hashOfConfig":"37"},{"size":4569,"mtime":1616133874720,"results":"64","hashOfConfig":"37"},{"size":3748,"mtime":1616133900068,"results":"65","hashOfConfig":"37"},{"size":1930,"mtime":1614852866479,"results":"66","hashOfConfig":"37"},{"size":4930,"mtime":1615992093826,"results":"67","hashOfConfig":"37"},{"size":966,"mtime":1615372193969,"results":"68","hashOfConfig":"37"},{"size":5538,"mtime":1615992062115,"results":"69","hashOfConfig":"37"},{"size":480,"mtime":1615372408800,"results":"70","hashOfConfig":"37"},{"size":6381,"mtime":1615998368986,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"939279",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx",[],["148","149"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx",["150"],"import { Box, CircularProgress, Heading, HStack, Text, useColorMode, VStack } from '@chakra-ui/react'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { useRecoilState } from 'recoil'\r\nimport HeadBreadcrumbs from '../../components/HeadBreadcrumbs'\r\nimport { schemasAtom } from '../../store/schemas'\r\nimport CreateSchema from './CreateSchema'\r\nimport SchemaItem from './SchemaItem'\r\n\r\nconst Schemas = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const { serviceID } = useParams<any>();\r\n    const [schemas, setSchemas] = useRecoilState(schemasAtom)\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect(() => {\r\n        axios.get(\"https://egnite-backend.herokuapp.com/schemas?fetchRelations=true&service=\"+serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                setSchemas([...res?.data?.schemas]);\r\n                setLoading(false)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setLoading(false)\r\n            });\r\n    }, [setSchemas])\r\n\r\n    return (\r\n        <VStack padding=\"20px\">\r\n            <HeadBreadcrumbs primary=\"Schemas\" primaryRoute={`/${serviceID}/schemas`} secondary=\"Overview\" secondaryRoute={`/${serviceID}/schemas`} />\r\n            <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                <Box padding=\"20px\">\r\n                    <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">Schemas</Heading>\r\n                    <Text fontSize=\"sm\" color=\"gray.500\">This space is for management of all your schemas</Text>\r\n                </Box>\r\n                <Box padding=\"20px\">\r\n                    <CreateSchema />\r\n                </Box>\r\n            </HStack>\r\n            <VStack width=\"100%\">\r\n            {loading? <Box display=\"flex\" width=\"100%\" justifyContent=\"center\"> <CircularProgress  isIndeterminate color=\"blue.500\" trackColor=\"grey.500\"/></Box>\r\n            : schemas.map(schema => <SchemaItem key={schema.ID} id={schema.ID} name={schema.Name} description={schema.Description} fields={schema?.Fields?.length} relations={schema?.Relations?.length} />)}\r\n            </VStack>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default Schemas\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx",["151"],"import { Box, Heading, HStack, Table, TableCaption, Tbody, Td, Text, Th, Thead, Tr, useColorMode, VStack } from '@chakra-ui/react'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { BiLink, BiToggleLeft } from 'react-icons/bi'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useRecoilState } from 'recoil'\r\nimport HeadBreadcrumbs from '../../../components/HeadBreadcrumbs'\r\nimport LoadingSkeleton from '../../../components/LoadingSkeleton'\r\nimport { schemasAtom } from '../../../store/schemas'\r\nimport CreateField from './CreateField'\r\nimport DeleteField from './DeleteField'\r\nimport DeleteRelation from './DeleteRelation'\r\nimport { MdTextFields } from \"react-icons/md\";\r\nimport { ImListNumbered } from \"react-icons/im\";\r\nimport UpdateField from './UpdateField'\r\nimport { AiOutlineClockCircle, AiOutlineNumber } from \"react-icons/ai\";\r\n\r\ninterface SchemaData {\r\n    ID: string,\r\n    Name: string,\r\n    Description: string,\r\n    Fields: any[],\r\n    Relations: any[]\r\n}\r\n\r\nconst Schema = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const { schemaId, serviceID } = useParams<any>();\r\n    const [schema, setSchema] = useState<SchemaData>()\r\n    const [loading, setLoading] = useState(true)\r\n    const [schemas, setSchemas] = useRecoilState(schemasAtom)\r\n    console.log(schemas)\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        if (schemas.length === 0) {\r\n            axios.get(\"https://egnite-backend.herokuapp.com/schemas?fetchRelations=true&service=\"+serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n                .then((res: any) => {\r\n                    setSchemas([...res?.data?.schemas]);\r\n                    res?.data?.schemas.map((schema: any) => {\r\n                        if (schema.ID === schemaId) {\r\n                            setSchema({ ...schema })\r\n                        }\r\n                        return schema;\r\n                    })\r\n                    setLoading(false);\r\n                })\r\n                .catch((err) => {\r\n                    setLoading(false);\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            schemas.map((schema: any) => {\r\n                if (schema.ID === schemaId) {\r\n                    setSchema({ ...schema })\r\n                }\r\n                setLoading(false);\r\n                return schema;\r\n            })\r\n        }\r\n    }, [schemas, schemaId, setSchemas, setSchema, setLoading])\r\n\r\n    if (loading) return <LoadingSkeleton />\r\n\r\n    return (\r\n        <VStack padding=\"20px\">\r\n            <HeadBreadcrumbs primary=\"Schemas\" primaryRoute={`/${serviceID}/schemas`} secondary={schema!.Name} secondaryRoute={`/${serviceID}/schemas/${schema!.ID}`} />\r\n            <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                <Box padding=\"20px\">\r\n                    <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">{schema!.Name} (Fields & Relations)</Heading>\r\n                    <Text fontSize=\"sm\" color=\"gray.500\">{schema!.Description}</Text>\r\n                </Box>\r\n                <Box padding=\"20px\">\r\n                    <CreateField />\r\n                </Box>\r\n            </HStack>\r\n            <VStack width=\"100%\">\r\n                <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\" padding=\"20px 0px\">\r\n                    <Table variant=\"simple\">\r\n                        <TableCaption>\r\n                            <CreateField buttonType=\"table\"/>\r\n                        </TableCaption>\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Field / Relation</Th>\r\n                                <Th>Type</Th>\r\n                                <Th isNumeric>Actions</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {schema?.Fields.map(field => <Tr _hover={{ backgroundColor: colorMode === \"light\" ? \"gray.50\" : \"#2d374863\" }}>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}>\r\n                                    <HStack>\r\n                                        <Box marginRight=\"10px\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderRadius=\"6px\" width=\"40px\" height=\"40px\" backgroundColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}>\r\n                                            {field.Type === \"int32\" || field.Type === \"int64\" || field.Type === \"uint32\" || field.Type === \"uint64\" || field.Type === \"float32\" || field.Type === \"float64\" ? <ImListNumbered size=\"25\" /> : null}\r\n                                            {field.Type === \"uuid\" ? <AiOutlineNumber size=\"25\" /> : null}\r\n                                            {field.Type === \"string\" ? <MdTextFields size=\"25\" /> : null}\r\n                                            {field.Type === \"bool\" ? <BiToggleLeft size=\"25\" /> : null}\r\n                                            {field.Type === \"datetime\" ? <AiOutlineClockCircle size=\"25\" /> : null}\r\n\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{field.Name}</Text>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"400\" color=\"gray.500\">{field.Name !== \"ID\" ?<>{field.Null === \"NULL\" ? \"null\" : \"not null\"}, {field.Unique ? \"unique\" : \"not unique\"} {field.Default === \"\" ? null : \", Default: \" + field.Default} </>:\"Primary Key\"} </Text>\r\n                                        </Box>\r\n                                    </HStack>\r\n\r\n                                </Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}><Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{field.Type}</Text></Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"} isNumeric>\r\n                                    {field.Name !== \"ID\" ? <><UpdateField id={field.ID} name={field.Name} type={field.Type} default={field.Default} null={field.Null} unique={field.Unique} /><DeleteField id={field.ID} /></> : null}\r\n                                </Td>\r\n                            </Tr>)}\r\n\r\n                            {schema?.Relations.map(relation => <Tr backgroundColor={colorMode === \"light\" ? \"#f7fafc75\" : \"transparent\"} _hover={{ backgroundColor: colorMode === \"light\" ? \"gray.50\" : \"#2d374863\" }}>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}>\r\n                                    <HStack>\r\n                                        <Box marginRight=\"10px\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderRadius=\"6px\" width=\"40px\" height=\"40px\" backgroundColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}>\r\n                                            <BiLink size=\"25\" />\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{relation.Name}</Text>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"400\" color=\"gray.500\"> {relation.FromField.Name + \"-> \" + relation.ToSchema.Name + \".\" + relation.ToField.Name} </Text>\r\n                                        </Box>\r\n                                    </HStack>\r\n                                </Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}><Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>relation</Text></Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"} isNumeric>\r\n                                    <UpdateField id={relation.ID} name={relation.Name} type={relation.Type} to={relation.ToFieldID} toSchema={relation.ToSchemaID} fromField={relation.FromFieldID} />\r\n\r\n                                    <DeleteRelation id={relation.ID} />\r\n                                </Td>\r\n                            </Tr>)}\r\n                        </Tbody>\r\n\r\n                    </Table>\r\n                </Box>\r\n                {/* {schema?.Fields.map(field => <FieldItem key={field.ID} defaultValue={field.Default} id={field.ID} name={field.Name} type={field.Type} nullType={field.Null} unique={field.Unique} refresh={() => console.log(\"Refresh fields\")} />)}\r\n                {schema?.Relations.map(relation => <RelationItem from={relation.FromField.Name} to={relation.ToSchema.Name + \".\" + relation.ToField.Name} id={relation.ID} name={relation.Name} />)} */}\r\n            </VStack>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default Schema\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx",["152","153","154"],"import React, { useEffect, useState } from 'react'\r\nimport { Box, Button, Divider, FormControl, FormLabel, Heading, HStack, Input, Select, Tab, TabList, TabPanel, TabPanels, Tabs, Text, useColorMode, useToast, VStack } from '@chakra-ui/react'\r\nimport HeadBreadcrumbs from '../../components/HeadBreadcrumbs'\r\nimport { BiPlus, BiSave } from 'react-icons/bi'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router'\r\n\r\nconst General = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const { serviceID } = useParams<any>();\r\n    const [name, setName] = useState(\"\")\r\n    const [database, setDatabase] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [loadingDatabase, setLoadingDatabase] = useState(false)\r\n    const [loadingEnv, setLoadingEnv] = useState(false)\r\n    const [databaseHost, setDatabaseHost] = React.useState(\"\")\r\n    const [databasePort, setDatabasePort] = React.useState(\"\")\r\n    const [databaseUser, setDatabaseUser] = React.useState(\"\")\r\n    const [databasePassword, setDatabasePassword] = React.useState(\"\")\r\n    const [databaseName, setDatabaseName] = React.useState(\"\")\r\n    const [, setService] = useState({})\r\n    const toast = useToast()\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseHost(res?.data?.service.DatabaseHost)\r\n                setDatabasePort(res?.data?.service.DatabasePORT)\r\n                setDatabaseUser(res?.data?.service.DatabaseUser)\r\n                setDatabasePassword(res?.data?.service.DatabaseUserPassword)\r\n                setDatabaseName(res?.data?.service.DatabaseName)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [setService, serviceID])\r\n\r\n    const handleRefreshService = () => {\r\n        axios.get(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseHost(res?.data?.service.DatabaseHost)\r\n                setDatabasePort(res?.data?.service.DatabasePORT)\r\n                setDatabaseUser(res?.data?.service.DatabaseUser)\r\n                setDatabasePassword(res?.data?.service.DatabaseUserPassword)\r\n                setDatabaseName(res?.data?.service.DatabaseName)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    const handleUpdateDatabase = () => {\r\n        setLoadingDatabase(true)\r\n        axios.put(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { name, DatabaseType: database, DatabaseName: databaseName, DatabaseHost: databaseHost, DatabasePORT: databasePort, DatabaseUser: databaseUser, DatabaseUserPassword: databasePassword }, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then(response => {\r\n                console.log(response)\r\n                setTimeout(() => { setLoadingDatabase(false) }, 300)\r\n\r\n\r\n                toast({\r\n                    title: \"Database Updated.\",\r\n                    description: \"Yay! database creds successfully updated\",\r\n                    position: \"bottom-right\",\r\n                    status: \"success\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n            .catch(error => {\r\n                setLoadingDatabase(false)\r\n                console.log(error)\r\n                toast({\r\n                    title: \"Error Updating.\",\r\n                    description: \"Something went wrong updating database creds\",\r\n                    position: \"bottom-right\",\r\n                    status: \"error\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n    }\r\n\r\n    const handleUpdateService = () => {\r\n        setLoading(true)\r\n        axios.put(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { name }, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                setTimeout(() => { setLoading(false) }, 300)\r\n\r\n                handleRefreshService()\r\n                toast({\r\n                    title: \"Service Updated.\",\r\n                    description: \"Yay! service successfully updated\",\r\n                    position: \"bottom-right\",\r\n                    status: \"success\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setLoading(false)\r\n\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <VStack padding=\"20px\">\r\n                <HeadBreadcrumbs primary=\"Settings\" primaryRoute={\"/\" + serviceID + \"/settings\"} secondary=\"General\" secondaryRoute={\"/\" + serviceID + \"/settings\"} />\r\n                <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                    <Box padding=\"20px\">\r\n                        <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">Settings</Heading>\r\n                        <Text fontSize=\"sm\" color=\"gray.500\">You can tweak and turn the knobs here</Text>\r\n                    </Box>\r\n                    <Box padding=\"20px\">\r\n                        {/* <CreateSchema /> */}\r\n                    </Box>\r\n                </HStack>\r\n                <VStack width=\"100%\" spacing=\"8\"  >\r\n                    <Box width=\"100%\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n                        <Tabs size=\"md\"  width=\"100%\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\r\n                            <Box width=\"calc(100% - 32px)\" borderRadius=\"8px 8px 4px 4px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} paddingTop=\"10px\" pb=\"0\">\r\n                                <TabList>\r\n                                    <Tab fontWeight=\"500\" mr=\"6\">Service Details</Tab>\r\n                                    <Tab fontWeight=\"500\"  mr=\"6\">ENV (Variables)</Tab>\r\n                                    <Tab fontWeight=\"500\"  mr=\"6\">Database Details</Tab>\r\n                                </TabList>\r\n                            </Box>\r\n\r\n\r\n                            <TabPanels>\r\n                                <TabPanel paddingTop=\"0\">\r\n                                    <Box borderRadius=\"0 0 8px 8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100%)\">\r\n                                       \r\n                                        <HStack>\r\n                                            <Box width=\"100%\" px=\"6\" py=\"8\" pb=\"8\">\r\n                                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n                                                    <Box width=\"60%\" >\r\n                                                        <FormControl>\r\n                                                            <FormLabel>Service Name</FormLabel>\r\n                                                            <Input value={name} onChange={(e) => setName(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                        </FormControl>\r\n                                                    </Box>\r\n\r\n                                                    <Button size=\"md\" mt={4} isLoading={loading} loadingText=\"Updating Service\" onClick={handleUpdateService} colorScheme=\"blue\">\r\n                                                        <BiSave size=\"20\" />   <Text marginLeft=\"1\">Save Service</Text>\r\n                                                    </Button>\r\n\r\n                                                </VStack>\r\n                                            </Box>\r\n\r\n                                        </HStack>\r\n\r\n\r\n                                    </Box>\r\n                                </TabPanel>\r\n                                <TabPanel paddingTop=\"0\">\r\n                                    <Box borderRadius=\"0 0 8px 8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100%)\">\r\n                                       \r\n                                        <HStack>\r\n                                            <Box width=\"100%\" px=\"6\" py=\"8\" pb=\"8\">\r\n                                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n                                                    <HStack width=\"100%\" >\r\n                                                        <Box width=\"30%\" >\r\n                                                            <FormControl>\r\n                                                                <FormLabel>Variable Name</FormLabel>\r\n                                                                <Input variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                        <Box width=\"50%\" >\r\n                                                            <FormControl>\r\n                                                                <FormLabel>Value</FormLabel>\r\n                                                                <Input variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                    </HStack>\r\n\r\n                                                    <Button size=\"md\" mt={4} isLoading={loadingEnv} loadingText=\"Updating Service\" onClick={handleUpdateService} colorScheme=\"blue\">\r\n                                                        <BiSave size=\"20\" />  <Text marginLeft=\"1\">Save Variables</Text>\r\n                                                    </Button>\r\n                                                </VStack>\r\n                                            </Box>\r\n\r\n                                        </HStack>\r\n\r\n\r\n                                    </Box>\r\n                                </TabPanel>\r\n                                <TabPanel paddingTop=\"0\">\r\n                                    <Box  borderRadius=\"0 0 8px 8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100%)\">\r\n                                        \r\n                                        <HStack>\r\n                                            <Box width=\"100%\" px=\"6\" py=\"8\" pb=\"8\">\r\n                                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n\r\n                                                    <Box width=\"60%\" >\r\n                                                        <FormControl >\r\n                                                            <FormLabel>Database</FormLabel>\r\n                                                            <Select placeholder=\"Select Field Type\" value={database} onChange={(e) => setDatabase(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"}>\r\n                                                                <option value=\"postgresql\">PostgreSQL</option>\r\n                                                                <option value=\"mysql\">MYSQL</option>\r\n\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Box>\r\n                                                    <HStack mt={4} spacing={10} width=\"100%\">\r\n\r\n\r\n                                                        <FormControl width=\"60%\">\r\n                                                            <FormLabel>Database Host</FormLabel>\r\n                                                            <Input value={databaseHost} onChange={(e) => setDatabaseHost(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                        </FormControl>\r\n\r\n                                                        <FormControl width=\"15%\">\r\n                                                            <FormLabel>Port</FormLabel>\r\n                                                            <Input value={databasePort} onChange={(e) => setDatabasePort(e.target.value)} type=\"number\" variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                        </FormControl>\r\n                                                    </HStack>\r\n                                                    <FormControl width=\"60%\">\r\n                                                        <FormLabel>Database User</FormLabel>\r\n                                                        <Input value={databaseUser} onChange={(e) => setDatabaseUser(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                    </FormControl>\r\n                                                    <FormControl width=\"60%\">\r\n                                                        <FormLabel>Database Password</FormLabel>\r\n                                                        <Input value={databasePassword} onChange={(e) => setDatabasePassword(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                    </FormControl>\r\n\r\n                                                    <Box width=\"60%\" >\r\n\r\n                                                        <FormControl>\r\n                                                            <FormLabel>Database Name</FormLabel>\r\n                                                            <Input value={databaseName} onChange={(e) => setDatabaseName(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                                        </FormControl>\r\n                                                    </Box>\r\n                                                    <Button size=\"md\" mt={4} isLoading={loadingDatabase} loadingText=\"Updating Service\" onClick={handleUpdateDatabase} colorScheme=\"blue\">\r\n                                                        <BiSave size=\"20\" />   <Text marginLeft=\"1\">Save Database Creds</Text>\r\n                                                    </Button>\r\n\r\n                                                </VStack>\r\n                                            </Box>\r\n\r\n                                        </HStack>\r\n\r\n\r\n                                    </Box>\r\n                                </TabPanel>\r\n                            </TabPanels>\r\n                        </Tabs>\r\n                    </Box>\r\n\r\n\r\n\r\n\r\n                </VStack>\r\n            </VStack>\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default General\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx",["155"],"import { AlertDialog, AlertDialogBody, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogOverlay, Box, Button, Link, Tooltip, useColorMode, useColorModeValue, VStack } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\r\nimport { BiChevronsLeft, BiCog, BiFile, BiHome, BiLogOut, BiPaperPlane, BiStoreAlt } from \"react-icons/bi\";\r\nimport { NavLink, useHistory, useParams } from 'react-router-dom';\r\n\r\nconst Sidebar = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const history = useHistory()\r\n    const { serviceID } = useParams<any>();\r\n    const menuItemColor = useColorModeValue(\"gray.200\", \"gray.700\")\r\n    const [isOpen, setIsOpen] = React.useState(false)\r\n    const onClose = () => setIsOpen(false)\r\n    const cancelRef = React.useRef<any>()\r\n    const handleLogout = () => {\r\n        localStorage.setItem(\"loginStatus\",\"false\")\r\n        localStorage.setItem(\"accessToken\",\"\")\r\n        localStorage.setItem(\"serviceID\",\"\")\r\n        history.replace(\"/login\")\r\n    }\r\n    return (\r\n        <Box display=\"flex\" justifyContent=\"space-between\" flexDirection=\"column\" width=\"70px\" height=\"calc(100vh - 1px)\" padding=\"20px 10px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"}>\r\n            <VStack spacing={3}>\r\n                <Tooltip label=\"Go Back to Dashboard\" aria-label=\"Go Back to Dashboard\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/dashboard\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiChevronsLeft size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Schemas\" aria-label=\"Schemas\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+serviceID+\"/schemas\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <   BiFile size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Functions\" aria-label=\"Functions\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+serviceID+\"/functions\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiPaperPlane size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Marketplace\" aria-label=\"Marketplace\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+serviceID+\"/marketplace\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiStoreAlt size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Settings\" aria-label=\"Settings\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+serviceID+\"/settings\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiCog size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n            </VStack>\r\n\r\n            <VStack>\r\n                <ColorModeSwitcher />\r\n                <Tooltip label=\"Logout\" aria-label=\"Logout\" placement=\"right\" hasArrow >\r\n                    <Box display=\"flex\" onClick={() => setIsOpen(true)} cursor=\"pointer\" color=\"gray.500\" background={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"} borderRadius=\"15px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiLogOut size=\"25\" />\r\n                    </Box>\r\n                </Tooltip>\r\n                <AlertDialog\r\n                    isOpen={isOpen}\r\n                    leastDestructiveRef={cancelRef}\r\n                    onClose={onClose}\r\n                >\r\n                    <AlertDialogOverlay>\r\n                        <AlertDialogContent>\r\n                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                Logout\r\n                            </AlertDialogHeader>\r\n\r\n                            <AlertDialogBody>\r\n                                Are you sure you want to logout?\r\n                            </AlertDialogBody>\r\n\r\n                            <AlertDialogFooter>\r\n                                <Button ref={cancelRef} onClick={onClose}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button colorScheme=\"red\" onClick={handleLogout} ml={3}>\r\n                                    Logout\r\n                                </Button>\r\n                            </AlertDialogFooter>\r\n                        </AlertDialogContent>\r\n                    </AlertDialogOverlay>\r\n                </AlertDialog>\r\n            </VStack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx",[],["156","157"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\DiscoverService.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Logout.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\CreateService.tsx",[],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":26,"column":8,"nodeType":"164","endLine":26,"endColumn":20,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"163","line":60,"column":8,"nodeType":"164","endLine":60,"endColumn":62,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":2,"column":23,"nodeType":"169","messageId":"170","endLine":2,"endColumn":30},{"ruleId":"167","severity":1,"message":"171","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":16},{"ruleId":"167","severity":1,"message":"172","line":15,"column":24,"nodeType":"169","messageId":"170","endLine":15,"endColumn":37},{"ruleId":"167","severity":1,"message":"173","line":4,"column":41,"nodeType":"169","messageId":"170","endLine":4,"endColumn":47},{"ruleId":"158","replacedBy":"174"},{"ruleId":"160","replacedBy":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serviceID'. Either include it or remove the dependency array.","ArrayExpression",["178"],["179"],"@typescript-eslint/no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'BiPlus' is defined but never used.","'setLoadingEnv' is assigned a value but never used.","'BiHome' is defined but never used.",["176"],["177"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [serviceID, setSchemas]",{"range":"184","text":"185"},"Update the dependencies array to be: [schemas, schemaId, setSchemas, setSchema, setLoading, serviceID]",{"range":"186","text":"187"},[1165,1177],"[serviceID, setSchemas]",[2443,2497],"[schemas, schemaId, setSchemas, setSchema, setLoading, serviceID]"]