[{"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx":"1","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts":"2","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts":"3","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx":"4","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx":"5","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx":"6","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx":"7","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx":"8","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx":"9","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx":"10","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx":"11","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx":"12","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx":"13","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts":"14","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx":"15","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx":"16","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx":"17","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx":"18","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx":"19","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx":"20","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx":"21","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx":"22","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx":"23","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx":"24","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx":"25","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx":"26","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx":"27","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx":"28","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx":"29","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx":"30","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx":"31","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx":"32"},{"size":937,"mtime":1612589183659,"results":"33","hashOfConfig":"34"},{"size":416,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":5258,"mtime":499162500000,"results":"36","hashOfConfig":"34"},{"size":722,"mtime":1615300391178,"results":"37","hashOfConfig":"34"},{"size":1566,"mtime":1615273819552,"results":"38","hashOfConfig":"34"},{"size":798,"mtime":1614875541214,"results":"39","hashOfConfig":"34"},{"size":746,"mtime":1612435024944,"results":"40","hashOfConfig":"34"},{"size":752,"mtime":1612434964621,"results":"41","hashOfConfig":"34"},{"size":1926,"mtime":1615019764296,"results":"42","hashOfConfig":"34"},{"size":8928,"mtime":1615270887675,"results":"43","hashOfConfig":"34"},{"size":246,"mtime":1615298891505,"results":"44","hashOfConfig":"34"},{"size":2482,"mtime":1614859450017,"results":"45","hashOfConfig":"34"},{"size":6021,"mtime":1615097194748,"results":"46","hashOfConfig":"34"},{"size":122,"mtime":1612589639281,"results":"47","hashOfConfig":"34"},{"size":2088,"mtime":1615267161288,"results":"48","hashOfConfig":"34"},{"size":3744,"mtime":1615273521906,"results":"49","hashOfConfig":"34"},{"size":1177,"mtime":1612583175483,"results":"50","hashOfConfig":"34"},{"size":2539,"mtime":1614662731852,"results":"51","hashOfConfig":"34"},{"size":4377,"mtime":1615271731417,"results":"52","hashOfConfig":"34"},{"size":14045,"mtime":1615271702160,"results":"53","hashOfConfig":"34"},{"size":3439,"mtime":1615019764296,"results":"54","hashOfConfig":"34"},{"size":327,"mtime":1612622898457,"results":"55","hashOfConfig":"34"},{"size":12701,"mtime":1615019764296,"results":"56","hashOfConfig":"34"},{"size":3452,"mtime":1615019764296,"results":"57","hashOfConfig":"34"},{"size":527,"mtime":1614852786625,"results":"58","hashOfConfig":"34"},{"size":713,"mtime":1614852814129,"results":"59","hashOfConfig":"34"},{"size":874,"mtime":1612420231202,"results":"60","hashOfConfig":"34"},{"size":4271,"mtime":1615019764296,"results":"61","hashOfConfig":"34"},{"size":3452,"mtime":1615019764297,"results":"62","hashOfConfig":"34"},{"size":1930,"mtime":1614852866479,"results":"63","hashOfConfig":"34"},{"size":610,"mtime":1615273465242,"results":"64","hashOfConfig":"34"},{"size":886,"mtime":1615274049648,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"939279",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx",[],["137","138"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx",["139"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx",["140","141","142","143","144"],"import * as React from \"react\"\r\nimport {\r\n  Box,\r\n  HStack,\r\n  useColorMode\r\n} from \"@chakra-ui/react\"\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Functions from \"./views/Functions/Functions\";\r\nimport Marketplace from \"./views/Marketplace/Marketplace\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport GitSidebar from \"./components/GitSidebar\";\r\nimport Schemas from \"./views/Schemas/Schemas\";\r\nimport Schema from \"./views/Schemas/Schema/Schema\";\r\nimport General from \"./views/Settings/General\";\r\nimport Dashboard from \"./views/Dashboard/Dashboard\";\r\nimport { Login } from \"./views/Authentication/Login\";\r\nimport AppLayoutRoute from \"./components/AppLayoutRoute\";\r\nimport DashboardLayoutRoute from \"./components/DashboardLayoutRoute\";\r\nimport SettingsLayoutRoute from \"./components/SettingsLayoutRoute\";\r\n\r\nconst Layout = () => {\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact ><Redirect to=\"/dashboard\"/></Route>\r\n      <DashboardLayoutRoute path=\"/dashboard\" exact component={Dashboard} />\r\n      <AppLayoutRoute path=\"/:serviceName/schemas\" exact component={Schemas} />\r\n      <AppLayoutRoute path=\"/:serviceName/schemas/:schemaId\" exact component={Schema} />\r\n      <AppLayoutRoute path=\"/:serviceName/functions\" exact component={Functions} />\r\n      <AppLayoutRoute path=\"/:serviceName/marketplace\" exact component={Marketplace} />\r\n      <SettingsLayoutRoute path=\"/:serviceName/settings\" exact component={General} />\r\n      <Route path=\"/login\" exact component={Login} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx",["145"],"import { Box, Heading, HStack, Table, TableCaption, Tbody, Td, Text, Th, Thead, Tr, useColorMode, VStack } from '@chakra-ui/react'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { BiLink, BiPlus, BiToggleLeft } from 'react-icons/bi'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useRecoilState } from 'recoil'\r\nimport HeadBreadcrumbs from '../../../components/HeadBreadcrumbs'\r\nimport LoadingSkeleton from '../../../components/LoadingSkeleton'\r\nimport { schemasAtom } from '../../../store/schemas'\r\nimport CreateField from './CreateField'\r\nimport DeleteField from './DeleteField'\r\nimport DeleteRelation from './DeleteRelation'\r\nimport { MdTextFields } from \"react-icons/md\";\r\nimport { ImListNumbered } from \"react-icons/im\";\r\nimport UpdateField from './UpdateField'\r\nimport { AiOutlineClockCircle, AiOutlineNumber } from \"react-icons/ai\";\r\n\r\ninterface SchemaData {\r\n    ID: string,\r\n    Name: string,\r\n    Description: string,\r\n    Fields: any[],\r\n    Relations: any[]\r\n}\r\n\r\nconst Schema = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const { schemaId, serviceName } = useParams<any>();\r\n    const [schema, setSchema] = useState<SchemaData>()\r\n    const [loading, setLoading] = useState(true)\r\n    const [schemas, setSchemas] = useRecoilState(schemasAtom)\r\n    console.log(schemas)\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        if (schemas.length === 0) {\r\n            axios.get(\"http://localhost:3210/schemas?fetchRelations=true\")\r\n                .then((res: any) => {\r\n                    setSchemas([...res?.data?.schemas]);\r\n                    res?.data?.schemas.map((schema: any) => {\r\n                        if (schema.ID === schemaId) {\r\n                            setSchema({ ...schema })\r\n                        }\r\n                        return schema;\r\n                    })\r\n                    setLoading(false);\r\n                })\r\n                .catch((err) => {\r\n                    setLoading(false);\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            schemas.map((schema: any) => {\r\n                if (schema.ID === schemaId) {\r\n                    setSchema({ ...schema })\r\n                }\r\n                setLoading(false);\r\n                return schema;\r\n            })\r\n        }\r\n    }, [schemas, schemaId, setSchemas, setSchema, setLoading])\r\n\r\n    if (loading) return <LoadingSkeleton />\r\n\r\n    return (\r\n        <VStack padding=\"20px\">\r\n            <HeadBreadcrumbs primary=\"Schemas\" primaryRoute={`/${serviceName}/schemas`} secondary={schema!.Name} secondaryRoute={`/${serviceName}/schemas/${schema!.ID}`} />\r\n            <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                <Box padding=\"20px\">\r\n                    <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">{schema!.Name} (Fields & Relations)</Heading>\r\n                    <Text fontSize=\"sm\" color=\"gray.500\">{schema!.Description}</Text>\r\n                </Box>\r\n                <Box padding=\"20px\">\r\n                    <CreateField />\r\n                </Box>\r\n            </HStack>\r\n            <VStack width=\"100%\">\r\n                <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\" padding=\"20px 0px\">\r\n                    <Table variant=\"simple\">\r\n                        <TableCaption>\r\n                            <CreateField buttonType=\"table\"/>\r\n                        </TableCaption>\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Field / Relation</Th>\r\n                                <Th>Type</Th>\r\n                                <Th isNumeric>Actions</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {schema?.Fields.map(field => <Tr _hover={{ backgroundColor: colorMode === \"light\" ? \"gray.50\" : \"#2d374863\" }}>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}>\r\n                                    <HStack>\r\n                                        <Box marginRight=\"10px\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderRadius=\"6px\" width=\"40px\" height=\"40px\" backgroundColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}>\r\n                                            {field.Type === \"int32\" || field.Type === \"int64\" || field.Type === \"uint32\" || field.Type === \"uint64\" || field.Type === \"float32\" || field.Type === \"float64\" ? <ImListNumbered size=\"25\" /> : null}\r\n                                            {field.Type === \"uuid\" ? <AiOutlineNumber size=\"25\" /> : null}\r\n                                            {field.Type === \"string\" ? <MdTextFields size=\"25\" /> : null}\r\n                                            {field.Type === \"bool\" ? <BiToggleLeft size=\"25\" /> : null}\r\n                                            {field.Type === \"datetime\" ? <AiOutlineClockCircle size=\"25\" /> : null}\r\n\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{field.Name}</Text>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"400\" color=\"gray.500\">{field.Name !== \"ID\" ?<>{field.Null === \"NULL\" ? \"null\" : \"not null\"}, {field.Unique ? \"unique\" : \"not unique\"} {field.Default === \"\" ? null : \", Default: \" + field.Default} </>:\"Primary Key\"} </Text>\r\n                                        </Box>\r\n                                    </HStack>\r\n\r\n                                </Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}><Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{field.Type}</Text></Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"} isNumeric>\r\n                                    {field.Name !== \"ID\" ? <><UpdateField id={field.ID} name={field.Name} type={field.Type} default={field.Default} null={field.Null} unique={field.Unique} /><DeleteField id={field.ID} /></> : null}\r\n                                </Td>\r\n                            </Tr>)}\r\n\r\n                            {schema?.Relations.map(relation => <Tr backgroundColor={colorMode === \"light\" ? \"#f7fafc75\" : \"transparent\"} _hover={{ backgroundColor: colorMode === \"light\" ? \"gray.50\" : \"#2d374863\" }}>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}>\r\n                                    <HStack>\r\n                                        <Box marginRight=\"10px\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderRadius=\"6px\" width=\"40px\" height=\"40px\" backgroundColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}>\r\n                                            <BiLink size=\"25\" />\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>{relation.Name}</Text>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"400\" color=\"gray.500\"> {relation.FromField.Name + \"-> \" + relation.ToSchema.Name + \".\" + relation.ToField.Name} </Text>\r\n                                        </Box>\r\n                                    </HStack>\r\n                                </Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"}><Text fontSize=\"md\" fontWeight=\"500\" color={colorMode === \"light\" ? \"gray.800\" : \"gray.400\"}>relation</Text></Td>\r\n                                <Td borderColor={colorMode === \"light\" ? \"#EDF2F7\" : \"#2d374830\"} isNumeric>\r\n                                    <UpdateField id={relation.ID} name={relation.Name} type={relation.Type} to={relation.ToFieldID} toSchema={relation.ToSchemaID} fromField={relation.FromFieldID} />\r\n\r\n                                    <DeleteRelation id={relation.ID} />\r\n                                </Td>\r\n                            </Tr>)}\r\n                        </Tbody>\r\n\r\n                    </Table>\r\n                </Box>\r\n                {/* {schema?.Fields.map(field => <FieldItem key={field.ID} defaultValue={field.Default} id={field.ID} name={field.Name} type={field.Type} nullType={field.Null} unique={field.Unique} refresh={() => console.log(\"Refresh fields\")} />)}\r\n                {schema?.Relations.map(relation => <RelationItem from={relation.FromField.Name} to={relation.ToSchema.Name + \".\" + relation.ToField.Name} id={relation.ID} name={relation.Name} />)} */}\r\n            </VStack>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default Schema\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx",["146"],"import {\r\n    Box,\r\n    Button,\r\n    Heading,\r\n    Image,\r\n    SimpleGrid,\r\n    Text,\r\n    useColorModeValue as mode,\r\n    VisuallyHidden,\r\n  } from '@chakra-ui/react'\r\n  import * as React from 'react'\r\n  import { Logo } from './Logo'\r\n  import { LoginForm } from './LoginForm'\r\n  import { FaFacebook, FaGoogle, FaGithub } from 'react-icons/fa'\r\n  import { DividerWithText } from './DividerWithText'\r\n  \r\n  export const Login = () => {\r\n    return (\r\n      <Box bg={mode('gray.50', 'inherit')} minH=\"100vh\" py=\"12\" px={{ sm: '6', lg: '8' }}>\r\n        <Box maxW={{ sm: 'md' }} mx={{ sm: 'auto' }} w={{ sm: 'full' }}>\r\n          <Box mb={{ base: '10', md: '28' }}>\r\n            <Image mx=\"auto\" h=\"10\" src=\"/egnite.svg\" />\r\n          </Box>\r\n          <Heading mt=\"6\" textAlign=\"center\" size=\"xl\" fontWeight=\"extrabold\">\r\n            Sign in to your account\r\n          </Heading>\r\n          <Text mt=\"4\" align=\"center\" maxW=\"md\" fontWeight=\"medium\">\r\n            <span>Don&apos;t have an account?</span>\r\n            <Box\r\n              as=\"a\" href=\"https://dw4b516oom0.typeform.com/to/amFe8E8d\" \r\n              marginStart=\"1\"\r\n              \r\n              color={mode('blue.600', 'blue.200')}\r\n              _hover={{ color: 'blue.600' }}\r\n              display={{ base: 'block', sm: 'revert' }}\r\n            >\r\n              Apply for access\r\n            </Box>\r\n          </Text>\r\n        </Box>\r\n        <Box maxW={{ sm: 'md' }} mx={{ sm: 'auto' }} mt=\"8\" w={{ sm: 'full' }}>\r\n          <Box\r\n            bg={mode('white', 'gray.700')}\r\n            py=\"8\"\r\n            px={{ base: '4', md: '10' }}\r\n            shadow=\"base\"\r\n            rounded={{ sm: 'lg' }}\r\n          >\r\n            <LoginForm />\r\n            <DividerWithText mt=\"6\">or continue with</DividerWithText>\r\n            <SimpleGrid mt=\"6\" columns={3} spacing=\"3\">\r\n              <Button color=\"currentColor\" variant=\"outline\">\r\n                <VisuallyHidden>Login with Facebook</VisuallyHidden>\r\n                <FaFacebook />\r\n              </Button>\r\n              <Button color=\"currentColor\" variant=\"outline\">\r\n                <VisuallyHidden>Login with Google</VisuallyHidden>\r\n                <FaGoogle />\r\n              </Button>\r\n              <Button color=\"currentColor\" variant=\"outline\">\r\n                <VisuallyHidden>Login with Github</VisuallyHidden>\r\n                <FaGithub />\r\n              </Button>\r\n            </SimpleGrid>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx",["147","148"],"import React, { useEffect, useState } from 'react'\r\nimport { Box, Button, Divider, Flex, FormControl, FormLabel, Heading, HStack, Input, Select, Text, useColorMode, useToast, VStack } from '@chakra-ui/react'\r\nimport HeadBreadcrumbs from '../../components/HeadBreadcrumbs'\r\nimport { BiEditAlt } from 'react-icons/bi'\r\nimport axios from 'axios'\r\n\r\nconst General = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const [name, setName] = useState(\"\")\r\n    const [database, setDatabase] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [databaseURI, setDatabaseURI] = useState(\"\")\r\n    const [service, setService] = useState({})\r\n    const toast = useToast()\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:3210/services/\" + localStorage.getItem(\"ServiceID\"))\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseURI(res?.data?.service.DatabaseURI)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [setService])\r\n\r\n    const handleRefreshService = () => {\r\n        axios.get(\"http://localhost:3210/services/\" + localStorage.getItem(\"ServiceID\"))\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseURI(res?.data?.service.DatabaseURI)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    const handleUpdateService = () => {\r\n        setLoading(true)\r\n        axios.put(\"http://localhost:3210/services/\" + localStorage.getItem(\"ServiceID\"), { name, DatabaseType: database, DatabaseURI: databaseURI })\r\n            .then((res: any) => {\r\n                setTimeout(() => { setLoading(false) }, 300)\r\n\r\n                handleRefreshService()\r\n                toast({\r\n                    title: \"Service Updated.\",\r\n                    description: \"Yay! service successfully updated\",\r\n                    position: \"bottom-right\",\r\n                    status: \"success\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setLoading(false)\r\n\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <VStack padding=\"20px\">\r\n                <HeadBreadcrumbs primary=\"Settings\" primaryRoute=\"/settings\" secondary=\"General\" secondaryRoute=\"/settings\" />\r\n                <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                    <Box padding=\"20px\">\r\n                        <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">Settings</Heading>\r\n                        <Text fontSize=\"sm\" color=\"gray.500\">You can tweak and turn the knobs here</Text>\r\n                    </Box>\r\n                    <Box padding=\"20px\">\r\n                        {/* <CreateSchema /> */}\r\n                    </Box>\r\n                </HStack>\r\n                <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\">\r\n                    <VStack align=\"flex-start\" justify=\"space-between\" spacing=\"0\" px=\"6\" py=\"4\">\r\n                        <Text as=\"h3\" fontWeight=\"bold\" fontSize=\"lg\">\r\n                            Service Settings\r\n                        </Text>\r\n                        <Text color=\"gray.500\" fontSize=\"sm\">\r\n                            Manage service details here\r\n                        </Text>\r\n\r\n                    </VStack>\r\n                    <Divider />\r\n                    <HStack>\r\n                        <Box width=\"50%\" px=\"6\" py=\"4\" pb=\"8\">\r\n                            <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n                                <FormControl>\r\n                                    <FormLabel>Service Name:</FormLabel>\r\n                                    <Input value={name} onChange={(e) => setName(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                </FormControl>\r\n                                <FormControl mt={4}>\r\n                                    <FormLabel>Database:</FormLabel>\r\n                                    <Select placeholder=\"Select Field Type\" value={database} onChange={(e) => setDatabase(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"}>\r\n                                        <option value=\"postgresql\">PostgreSQL</option>\r\n                                        <option value=\"mysql\">MYSQL</option>\r\n\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl mt={4}>\r\n                                    <FormLabel>Database URI:</FormLabel>\r\n                                    <Input value={databaseURI} onChange={(e) => setDatabaseURI(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                </FormControl>\r\n                                <Button size=\"md\" mt={4} isLoading={loading} loadingText=\"Updating Service\" onClick={handleUpdateService} colorScheme=\"blue\">\r\n                                    <BiEditAlt size=\"20\" />  <Text marginLeft=\"1\">Update Service</Text>\r\n                                </Button>\r\n\r\n                            </VStack>\r\n                        </Box>\r\n                        <Box width=\"50%\">\r\n\r\n                        </Box>\r\n                    </HStack>\r\n\r\n\r\n                </Box>\r\n            </VStack>\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default General\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx",["149","150","151"],"import { Box, Link, Tooltip, useColorMode, useColorModeValue, VStack } from '@chakra-ui/react'\r\nimport React, { useEffect } from 'react'\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\r\nimport { BiCog, BiFile, BiHome, BiLogOut, BiPaperPlane, BiSearch, BiStoreAlt } from \"react-icons/bi\";\r\nimport { NavLink, useHistory, useLocation } from 'react-router-dom';\r\n\r\nconst Sidebar = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const menuItemColor = useColorModeValue(\"gray.200\", \"gray.700\")\r\n    const location = useLocation<any>();\r\n    console.log(location.pathname)\r\n   \r\n    return (\r\n        <Box display=\"flex\" justifyContent=\"space-between\" flexDirection=\"column\" width=\"70px\" height=\"100vh\" padding=\"20px 10px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"}>\r\n            <VStack spacing={3}>\r\n                <Tooltip label=\"Search\" aria-label=\"Search\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/dashboard\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiHome size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Schemas\" aria-label=\"Schemas\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+location.pathname.split(\"/\")[1]+\"/schemas\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                    <   BiFile size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Functions\" aria-label=\"Functions\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+location.pathname.split(\"/\")[1]+\"/functions\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiPaperPlane size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Marketplace\" aria-label=\"Marketplace\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+location.pathname.split(\"/\")[1]+\"/marketplace\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiStoreAlt size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Settings\" aria-label=\"Settings\" placement=\"right\" hasArrow >\r\n                    <Link as={NavLink} to={\"/\"+location.pathname.split(\"/\")[1]+\"/settings\"} activeClassName=\"active-menu\" display=\"flex\" color=\"gray.500\" background={menuItemColor} borderRadius=\"18px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiCog size=\"25\" />\r\n                    </Link>\r\n                </Tooltip>\r\n            </VStack>\r\n\r\n            <VStack>\r\n                <ColorModeSwitcher />\r\n                <Tooltip label=\"Logout\" aria-label=\"Logout\" placement=\"right\" hasArrow >\r\n                    <Box display=\"flex\" cursor=\"pointer\" color=\"gray.500\" background={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"} borderRadius=\"15px\" justifyContent=\"center\" alignItems=\"center\" width=\"45px\" height=\"45px\">\r\n                        <BiLogOut size=\"25\" />\r\n                    </Box>\r\n                </Tooltip>\r\n            </VStack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx",["152","153","154"],"import { Box, HStack, useColorMode } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport GitSidebar from './GitSidebar'\r\nimport Sidebar from './Sidebar'\r\n\r\nconst DashboardLayoutRoute = ({ component: C, ...props }: any) => {\r\n    const { colorMode } = useColorMode()\r\n    return (\r\n        <Route {...props}>\r\n            <Box background={colorMode === \"light\" ? \"gray.100\" : \"gray.900\"} width=\"100%\" overflowY=\"scroll\" padding=\"10px\" height=\"100vh\">\r\n                <C />\r\n            </Box>\r\n        </Route>\r\n    )\r\n}\r\n\r\nexport default DashboardLayoutRoute\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":22,"column":11,"nodeType":"161","messageId":"162","endLine":22,"endColumn":20},{"ruleId":"159","severity":1,"message":"163","line":3,"column":3,"nodeType":"161","messageId":"162","endLine":3,"endColumn":6},{"ruleId":"159","severity":1,"message":"164","line":4,"column":3,"nodeType":"161","messageId":"162","endLine":4,"endColumn":9},{"ruleId":"159","severity":1,"message":"165","line":5,"column":3,"nodeType":"161","messageId":"162","endLine":5,"endColumn":15},{"ruleId":"159","severity":1,"message":"166","line":10,"column":8,"nodeType":"161","messageId":"162","endLine":10,"endColumn":15},{"ruleId":"159","severity":1,"message":"167","line":11,"column":8,"nodeType":"161","messageId":"162","endLine":11,"endColumn":18},{"ruleId":"159","severity":1,"message":"168","line":4,"column":18,"nodeType":"161","messageId":"162","endLine":4,"endColumn":24},{"ruleId":"159","severity":1,"message":"169","line":12,"column":12,"nodeType":"161","messageId":"162","endLine":12,"endColumn":16},{"ruleId":"159","severity":1,"message":"170","line":2,"column":32,"nodeType":"161","messageId":"162","endLine":2,"endColumn":36},{"ruleId":"159","severity":1,"message":"171","line":13,"column":12,"nodeType":"161","messageId":"162","endLine":13,"endColumn":19},{"ruleId":"159","severity":1,"message":"172","line":2,"column":17,"nodeType":"161","messageId":"162","endLine":2,"endColumn":26},{"ruleId":"159","severity":1,"message":"173","line":4,"column":57,"nodeType":"161","messageId":"162","endLine":4,"endColumn":65},{"ruleId":"159","severity":1,"message":"174","line":5,"column":19,"nodeType":"161","messageId":"162","endLine":5,"endColumn":29},{"ruleId":"159","severity":1,"message":"164","line":1,"column":15,"nodeType":"161","messageId":"162","endLine":1,"endColumn":21},{"ruleId":"159","severity":1,"message":"167","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":18},{"ruleId":"159","severity":1,"message":"166","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":15},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"@typescript-eslint/no-unused-vars","'colorMode' is assigned a value but never used.","Identifier","unusedVar","'Box' is defined but never used.","'HStack' is defined but never used.","'useColorMode' is defined but never used.","'Sidebar' is defined but never used.","'GitSidebar' is defined but never used.","'BiPlus' is defined but never used.","'Logo' is defined but never used.","'Flex' is defined but never used.","'service' is assigned a value but never used.","'useEffect' is defined but never used.","'BiSearch' is defined but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation"]