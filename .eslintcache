[{"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx":"1","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts":"2","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts":"3","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx":"4","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx":"5","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx":"6","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx":"7","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx":"8","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx":"9","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx":"10","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx":"11","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx":"12","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx":"13","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts":"14","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx":"15","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx":"16","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx":"17","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx":"18","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx":"19","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx":"20","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx":"21","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx":"22","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx":"23","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx":"24","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx":"25","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx":"26","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx":"27","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx":"28","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx":"29","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx":"30","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx":"31","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx":"32","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\DiscoverService.tsx":"33","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Logout.tsx":"34","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\CreateService.tsx":"35"},{"size":937,"mtime":1612589183659,"results":"36","hashOfConfig":"37"},{"size":416,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":5258,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":565,"mtime":1615369872161,"results":"40","hashOfConfig":"37"},{"size":1785,"mtime":1615986881733,"results":"41","hashOfConfig":"37"},{"size":911,"mtime":1615372167890,"results":"42","hashOfConfig":"37"},{"size":1162,"mtime":1615981578688,"results":"43","hashOfConfig":"37"},{"size":1170,"mtime":1615981558767,"results":"44","hashOfConfig":"37"},{"size":2343,"mtime":1615987490671,"results":"45","hashOfConfig":"37"},{"size":8973,"mtime":1615981050376,"results":"46","hashOfConfig":"37"},{"size":1154,"mtime":1615981615496,"results":"47","hashOfConfig":"37"},{"size":1572,"mtime":1615369805449,"results":"48","hashOfConfig":"37"},{"size":15054,"mtime":1615983610735,"results":"49","hashOfConfig":"37"},{"size":122,"mtime":1612589639281,"results":"50","hashOfConfig":"37"},{"size":2115,"mtime":1615987672087,"results":"51","hashOfConfig":"37"},{"size":5369,"mtime":1615986775097,"results":"52","hashOfConfig":"37"},{"size":1177,"mtime":1612583175483,"results":"53","hashOfConfig":"37"},{"size":2535,"mtime":1615980890737,"results":"54","hashOfConfig":"37"},{"size":5246,"mtime":1615983127253,"results":"55","hashOfConfig":"37"},{"size":14333,"mtime":1615981093149,"results":"56","hashOfConfig":"37"},{"size":3631,"mtime":1615981062481,"results":"57","hashOfConfig":"37"},{"size":327,"mtime":1612622898457,"results":"58","hashOfConfig":"37"},{"size":12989,"mtime":1615981031315,"results":"59","hashOfConfig":"37"},{"size":3644,"mtime":1615981073592,"results":"60","hashOfConfig":"37"},{"size":527,"mtime":1614852786625,"results":"61","hashOfConfig":"37"},{"size":2255,"mtime":1615956317723,"results":"62","hashOfConfig":"37"},{"size":874,"mtime":1612420231202,"results":"63","hashOfConfig":"37"},{"size":4463,"mtime":1615981002152,"results":"64","hashOfConfig":"37"},{"size":3644,"mtime":1615980986345,"results":"65","hashOfConfig":"37"},{"size":1930,"mtime":1614852866479,"results":"66","hashOfConfig":"37"},{"size":4888,"mtime":1615967448720,"results":"67","hashOfConfig":"37"},{"size":966,"mtime":1615372193969,"results":"68","hashOfConfig":"37"},{"size":5482,"mtime":1615987529377,"results":"69","hashOfConfig":"37"},{"size":480,"mtime":1615372408800,"results":"70","hashOfConfig":"37"},{"size":6239,"mtime":1615983717764,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"939279",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\index.tsx",[],["145","146"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\reportWebVitals.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\serviceWorker.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\App.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\Layout.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\AppLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Functions\\Functions.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Marketplace\\Marketplace.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schemas.tsx",["147"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\Schema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Dashboard\\Dashboard.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Login.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Settings\\General.tsx",["148"],"import React, { useEffect, useState } from 'react'\r\nimport { Box, Button, Divider, FormControl, FormLabel, Heading, HStack, Input, Select, Text, useColorMode, useToast, VStack } from '@chakra-ui/react'\r\nimport HeadBreadcrumbs from '../../components/HeadBreadcrumbs'\r\nimport { BiPlus, BiSave } from 'react-icons/bi'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router'\r\n\r\nconst General = () => {\r\n    const { colorMode, } = useColorMode()\r\n    const { serviceID } = useParams<any>();\r\n    const [name, setName] = useState(\"\")\r\n    const [database, setDatabase] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [loadingDatabase, setLoadingDatabase] = useState(false)\r\n    const [loadingEnv, setLoadingEnv] = useState(false)\r\n    const [databaseHost, setDatabaseHost] = React.useState(\"\")\r\n    const [databasePort, setDatabasePort] = React.useState(\"\")\r\n    const [databaseUser, setDatabaseUser] = React.useState(\"\")\r\n    const [databasePassword, setDatabasePassword] = React.useState(\"\")\r\n    const [databaseName, setDatabaseName] = React.useState(\"\")\r\n    const [, setService] = useState({})\r\n    const toast = useToast()\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseHost(res?.data?.service.DatabaseHost)\r\n                setDatabasePort(res?.data?.service.DatabasePORT)\r\n                setDatabaseUser(res?.data?.service.DatabaseUser)\r\n                setDatabasePassword(res?.data?.service.DatabaseUserPassword)\r\n                setDatabaseName(res?.data?.service.DatabaseName)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [setService,serviceID])\r\n\r\n    const handleRefreshService = () => {\r\n        axios.get(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                console.log(res)\r\n                setService(res?.data?.service);\r\n                setName(res?.data?.service.name)\r\n                setDatabase(res?.data?.service.DatabaseType)\r\n                setDatabaseHost(res?.data?.service.DatabaseHost)\r\n                setDatabasePort(res?.data?.service.DatabasePORT)\r\n                setDatabaseUser(res?.data?.service.DatabaseUser)\r\n                setDatabasePassword(res?.data?.service.DatabaseUserPassword)\r\n                setDatabaseName(res?.data?.service.DatabaseName)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    const handleUpdateDatabase = () => {\r\n        setLoadingDatabase(true)\r\n        axios.put(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { name, DatabaseType: database, DatabaseName: databaseName, DatabaseHost: databaseHost, DatabasePORT: databasePort, DatabaseUser: databaseUser, DatabaseUserPassword: databasePassword }, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then(response => {\r\n                console.log(response)\r\n                setTimeout(() => { setLoadingDatabase(false) }, 300)\r\n\r\n                \r\n                toast({\r\n                    title: \"Database Updated.\",\r\n                    description: \"Yay! database creds successfully updated\",\r\n                    position: \"bottom-right\",\r\n                    status: \"success\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n            .catch(error => {\r\n                setLoadingDatabase(false)\r\n                console.log(error)\r\n                toast({\r\n                    title: \"Error Updating.\",\r\n                    description: \"Something went wrong updating database creds\",\r\n                    position: \"bottom-right\",\r\n                    status: \"error\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n    }\r\n\r\n    const handleUpdateService = () => {\r\n        setLoading(true)\r\n        axios.put(\"https://egnite-backend.herokuapp.com/services/\" + serviceID, { name}, { headers: { Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") } })\r\n            .then((res: any) => {\r\n                setTimeout(() => { setLoading(false) }, 300)\r\n\r\n                handleRefreshService()\r\n                toast({\r\n                    title: \"Service Updated.\",\r\n                    description: \"Yay! service successfully updated\",\r\n                    position: \"bottom-right\",\r\n                    status: \"success\",\r\n                    duration: 9000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setLoading(false)\r\n\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <VStack padding=\"20px\">\r\n                <HeadBreadcrumbs primary=\"Settings\" primaryRoute={\"/\"+serviceID+\"/settings\"} secondary=\"General\" secondaryRoute={\"/\"+serviceID+\"/settings\"} />\r\n                <HStack justifyContent=\"space-between\" width=\"100%\">\r\n                    <Box padding=\"20px\">\r\n                        <Heading color={colorMode === \"light\" ? \"gray.700\" : \"gray.200\"} size=\"lg\">Settings</Heading>\r\n                        <Text fontSize=\"sm\" color=\"gray.500\">You can tweak and turn the knobs here</Text>\r\n                    </Box>\r\n                    <Box padding=\"20px\">\r\n                        {/* <CreateSchema /> */}\r\n                    </Box>\r\n                </HStack>\r\n                <VStack width=\"100%\" spacing=\"8\"  >\r\n                    <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\">\r\n                        <VStack align=\"flex-start\" justify=\"space-between\" spacing=\"0\" px=\"6\" py=\"4\">\r\n                            <Text as=\"h3\" fontWeight=\"bold\" fontSize=\"lg\">\r\n                                Service Settings\r\n                        </Text>\r\n                            <Text color=\"gray.500\" fontSize=\"sm\">\r\n                                Manage service details here\r\n                        </Text>\r\n\r\n                        </VStack>\r\n                        <Divider />\r\n                        <HStack>\r\n                            <Box width=\"100%\" px=\"6\" py=\"4\" pb=\"8\">\r\n                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n                                    <Box width=\"60%\" >\r\n                                        <FormControl>\r\n                                            <FormLabel>Service Name</FormLabel>\r\n                                            <Input value={name} onChange={(e) => setName(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                        </FormControl>\r\n                                    </Box>\r\n\r\n                                    <Button size=\"md\" mt={4} isLoading={loading} loadingText=\"Updating Service\" onClick={handleUpdateService} colorScheme=\"blue\">\r\n                                        <BiSave size=\"20\" />   <Text marginLeft=\"1\">Save Service</Text>\r\n                                    </Button>\r\n\r\n                                </VStack>\r\n                            </Box>\r\n\r\n                        </HStack>\r\n\r\n\r\n                    </Box>\r\n                    <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\">\r\n                        <HStack justify=\"space-between\">\r\n                            <VStack align=\"flex-start\" justify=\"space-between\" spacing=\"0\" px=\"6\" py=\"4\">\r\n                                <Text as=\"h3\" fontWeight=\"bold\" fontSize=\"lg\">\r\n                                    Environment Variables\r\n                                </Text>\r\n                                <Text color=\"gray.500\" fontSize=\"sm\">\r\n                                    Create and manage environment variables\r\n                                </Text>\r\n                            </VStack>\r\n                            <Box px=\"6\" py=\"4\">\r\n\r\n                                <Button size=\"md\" mt={4} isLoading={loading} loadingText=\"Updating Service\" onClick={() => { }}>\r\n                                    <BiPlus size=\"20\" />   <Text marginLeft=\"1\">Add New Variable</Text>\r\n                                </Button>\r\n                            </Box>\r\n                        </HStack>\r\n\r\n                        <Divider />\r\n                        <HStack>\r\n                            <Box width=\"100%\" px=\"6\" py=\"4\" pb=\"8\">\r\n                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n                                    <HStack width=\"100%\" >\r\n                                        <Box width=\"30%\" >\r\n                                            <FormControl>\r\n                                                <FormLabel>Variable Name</FormLabel>\r\n                                                <Input variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                        <Box width=\"50%\" >\r\n                                            <FormControl>\r\n                                                <FormLabel>Value</FormLabel>\r\n                                                <Input variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                    </HStack>\r\n\r\n                                    <Button size=\"md\" mt={4} isLoading={loadingEnv} loadingText=\"Updating Service\" onClick={handleUpdateService} colorScheme=\"blue\">\r\n                                        <BiSave size=\"20\" />  <Text marginLeft=\"1\">Save Variables</Text>\r\n                                    </Button>\r\n                                </VStack>\r\n                            </Box>\r\n\r\n                        </HStack>\r\n\r\n\r\n                    </Box>\r\n\r\n                    <Box borderRadius=\"8px\" background={colorMode === \"light\" ? \"white\" : \"gray.800\"} width=\"calc(100% - 40px)\">\r\n                        <VStack align=\"flex-start\" justify=\"space-between\" spacing=\"0\" px=\"6\" py=\"4\">\r\n                            <Text as=\"h3\" fontWeight=\"bold\" fontSize=\"lg\">\r\n                                Database Settings\r\n                        </Text>\r\n                            <Text color=\"gray.500\" fontSize=\"sm\">\r\n                                Manage database details here\r\n                        </Text>\r\n\r\n                        </VStack>\r\n                        <Divider />\r\n                        <HStack>\r\n                            <Box width=\"100%\" px=\"6\" py=\"4\" pb=\"8\">\r\n                                <VStack justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={6}>\r\n\r\n                                    <Box width=\"60%\" >\r\n                                        <FormControl >\r\n                                            <FormLabel>Database</FormLabel>\r\n                                            <Select placeholder=\"Select Field Type\" value={database} onChange={(e) => setDatabase(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"}>\r\n                                                <option value=\"postgresql\">PostgreSQL</option>\r\n                                                <option value=\"mysql\">MYSQL</option>\r\n\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    <HStack mt={4} spacing={10} width=\"100%\">\r\n\r\n\r\n                                        <FormControl width=\"60%\">\r\n                                            <FormLabel>Database Host</FormLabel>\r\n                                            <Input value={databaseHost} onChange={(e) => setDatabaseHost(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                        </FormControl>\r\n\r\n                                        <FormControl width=\"15%\">\r\n                                            <FormLabel>Port</FormLabel>\r\n                                            <Input value={databasePort} onChange={(e) => setDatabasePort(e.target.value)} type=\"number\" variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                        </FormControl>\r\n                                    </HStack>\r\n                                    <FormControl width=\"60%\">\r\n                                        <FormLabel>Database User</FormLabel>\r\n                                        <Input value={databaseUser} onChange={(e) => setDatabaseUser(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                    </FormControl>\r\n                                    <FormControl width=\"60%\">\r\n                                        <FormLabel>Database Password</FormLabel>\r\n                                        <Input value={databasePassword} onChange={(e) => setDatabasePassword(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                    </FormControl>\r\n\r\n                                    <Box width=\"60%\" >\r\n\r\n                                        <FormControl>\r\n                                            <FormLabel>Database Name</FormLabel>\r\n                                            <Input value={databaseName} onChange={(e) => setDatabaseName(e.target.value)} variant=\"filled\" borderColor={colorMode === \"light\" ? \"gray.300\" : \"gray.600\"} />\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    <Button size=\"md\" mt={4} isLoading={loadingDatabase} loadingText=\"Updating Service\" onClick={handleUpdateDatabase} colorScheme=\"blue\">\r\n                                        <BiSave size=\"20\" />   <Text marginLeft=\"1\">Save Database Creds</Text>\r\n                                    </Button>\r\n\r\n                                </VStack>\r\n                            </Box>\r\n\r\n                        </HStack>\r\n\r\n\r\n                    </Box>\r\n                </VStack>\r\n            </VStack>\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default General\r\n","C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\store\\schemas.ts",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\GitSidebar.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\Sidebar.tsx",["149"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\HeadBreadcrumbs.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\SchemaItem.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\CreateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\CreateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteRelation.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\LoadingSkeleton.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\UpdateField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\Schema\\DeleteField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\DividerWithText.tsx",[],["150","151"],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\LoginForm.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\ColorModeSwitcher.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\UpdateSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Schemas\\DeleteSchema.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\PasswordField.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\DashboardLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\components\\SettingsLayoutRoute.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\DiscoverService.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\Authentication\\Logout.tsx",[],"C:\\Projects\\Egnite Dev\\Api Builder\\egnite-app\\src\\views\\CreateService.tsx",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":26,"column":8,"nodeType":"158","endLine":26,"endColumn":20,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":15,"column":24,"nodeType":"162","messageId":"163","endLine":15,"endColumn":37},{"ruleId":"160","severity":1,"message":"164","line":4,"column":41,"nodeType":"162","messageId":"163","endLine":4,"endColumn":47},{"ruleId":"152","replacedBy":"165"},{"ruleId":"154","replacedBy":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serviceID'. Either include it or remove the dependency array.","ArrayExpression",["169"],"@typescript-eslint/no-unused-vars","'setLoadingEnv' is assigned a value but never used.","Identifier","unusedVar","'BiHome' is defined but never used.",["167"],["168"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},"Update the dependencies array to be: [serviceID, setSchemas]",{"range":"172","text":"173"},[1165,1177],"[serviceID, setSchemas]"]